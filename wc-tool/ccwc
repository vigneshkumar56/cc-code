#!/usr/bin/python3
import sys
import argparse
import os

#Extract counts
def extract_contents(file_data):
    byte_count = char_count = word_count = line_count = 0
    for line in file_data:
        byte_count += len(line)
        char_count += len(line.decode())
        word_count += len(line.split())
        line_count += 1
    return byte_count, line_count, word_count, char_count
#function to print 
def print_contents(args, result, file_name = ""):
    byte_count, line_count, word_count, char_count = result
    output_string = ""
    if not (args.count_byte or args.count_line or args.count_word or args.count_char):
        output_string = "{}\t{}\t{}\t{}".format(line_count, word_count, byte_count, file_name)
    else:
        if args.count_line:
            output_string += "{}\t".format(line_count)
        if args.count_word:
            output_string += "{}\t".format(word_count)
        if args.count_char:
            output_string += "{}\t".format(char_count)
        if args.count_byte:
            output_string += "{}\t".format(byte_count)
        output_string += file_name
    print(output_string)
 
def output_contents(args, total_count):
    if not args.file_list:
        file_data = sys.stdin.buffer
        result = extract_contents(file_data)
        print_contents(args, result)
    else:
        for file in args.file_list:
            try:
                with open(file, "rb") as file_data:
                    result = extract_contents(file_data)
                    total_count = [x + y for x, y in zip(total_count, result)]
                    print_contents(args, result, file)
            except FileNotFoundError:
                    print(f"ccwc: {file}: No such a file or directory")
    if len(args.file_list) > 1:
        print_contents(args, total_count, "total")
def main():
    parser = argparse.ArgumentParser(description=f"Python version of wc tool")
    parser.add_argument('-c', '--count_byte', action='store_true', help='Flag to get the number of bytes')
    parser.add_argument('-l', '--count_line', action='store_true', help='Flag to get the number of lines')
    parser.add_argument('-w', '--count_word', action='store_true', help='Flag to get the number of words')
    parser.add_argument('-m', '--count_char', action='store_true', help='Flag path to get the number of characters')
    parser.add_argument('file_list', nargs='*', default=[], help='List of IP file names')
    args = parser.parse_args()
    total_count = [0] * 4
    output_contents(args, total_count)

if __name__ == "__main__":
    main()
    
